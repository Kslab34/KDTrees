package kdTree;

import edu.princeton.cs.algs4.Point2D;
import edu.princeton.cs.algs4.Queue;
import edu.princeton.cs.algs4.RectHV;
import edu.princeton.cs.algs4.RedBlackBST;

/**
 * @author Kelby Schulz
 */
public class PointST<Value> {
	private RedBlackBST<Point2D, Value> bst;

	/**
	 * Construct an empty symbol table of points
	 */
	public PointST() {
		bst = new RedBlackBST<Point2D, Value>();
	}

	/**
	 * Is the symbol table empty?
	 * 
	 * @return
	 */
	public boolean isEmpty() {
		return bst.isEmpty();
	}

	/**
	 * Number of points
	 * 
	 * @return number of points
	 */
	public int size() {
		return bst.size();
	}

	/**
	 * Associate the value val with point p
	 * 
	 * @param p
	 * @param val
	 */
	public void put(Point2D p, Value val) {
		bst.put(p, val);
	}

	/**
	 * Value associated with point p
	 * 
	 * @param p
	 * @return
	 */
	public Value get(Point2D p) {
		return bst.get(p);
	}

	/**
	 * Does the symbol table contain point p?
	 * 
	 * @param p
	 * @return
	 */
	public boolean contains(Point2D p) {
		return bst.contains(p);
	}

	/**
	 * All points in the symbol table
	 * 
	 * @return
	 */
	public Iterable<Point2D> points() {
		return bst.keys();
	}

	/**
	 * All points that are inside the rectangle
	 * 
	 * @param rect
	 * @return
	 */
	public Iterable<Point2D> range(RectHV rect) {
		if (rect == null)
			throw new NullPointerException();

		Queue<Point2D> queue = new Queue<>();
		for (Point2D ele : bst.keys())
			queue.enqueue(ele);
		return queue;
	}

	/**
	 * A nearest neighbor to point p; null if the symbol table is empty
	 * 
	 * @param p
	 * @return
	 */
	public Point2D nearest(Point2D p) {
		if (p == null)
			throw new java.lang.NullPointerException();
		Point2D goal = null;
		double distancegoal = 0;
		for (Point2D point : bst.keys()) {
			if (goal == null) {
				goal = point;
				distancegoal = point.distanceSquaredTo(p);
			} else if (point.distanceSquaredTo(p) < distancegoal) {
				goal = point;
				distancegoal = point.distanceSquaredTo(p);
			}
		}
		return goal;
	}

	/**
	 * Unit testing of the methods (not graded)
	 * 
	 * @param args
	 */
	public static void main(String[] args) {

	}
}
